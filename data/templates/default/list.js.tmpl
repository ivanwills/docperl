[% PROCESS strings.tmpl -%]
[% UNLESS history_size %][% history_size = 10 %][% END -%]
/** @file    list.js
 *  @brief   Javascript for displaying/creating the module lists
 *  @author  Ivan Wills
 *  @version 0.4
 *  @created 2006-06-01
 *  @todo    Add AJAX stuff for file content searching
 *  @bug
 *
 *  This file contains the javascript for controlling the module list in DocPerl.
 *
 */

/**
 *  @todo
 *  @bug
 *
 *  Takes the module data and displaies all of the trees
 */
function setup_modules() {
	if ( !setup_modules.group ) setup_modules.group = 0;
	// set up each of perl, inc and local
	if ( setup_modules.group == 0 ) {
		level = 0;
		[% IF LocalOnly %]
		setup_modules.group = 3;
		[% ELSE %]
		setup_modules.group++;
		[% END %]
		create_tree( local, 'local', 'local' );
		add_count( 'local', count_tree( local, 'local' ) );
		setTimeout( setup_modules, 10 );
		if ( get_cookie('local') == 'hide' )
			section_toggle('local');
	}
	else if ( setup_modules.group == 1 ) {
		level = 0;
		var total_perl = create_tree( perl, 'perl', 'perl' );
		add_count( 'perl', count_tree( perl, 'perl' ) );
		setup_modules.group++;
		setTimeout( setup_modules, 10 );
		if ( get_cookie('perl') == 'hide' )
			section_toggle('perl');
	}
	else if ( setup_modules.group == 2 ) {
		level = 0;
		setup_modules.group++;
		create_tree( inc, 'inc', 'inc' );
		add_count( 'inc', count_tree( inc, 'inc' ) );
		setTimeout( setup_modules, 10 );
		if ( get_cookie('inc') == 'hide' )
			section_toggle('inc');
	}
	else if ( setup_modules.group == 3 ) {
		setup_modules.group++;
		var name = 'DocPerl_recent';
		if ( exists_cookie( name ) ) {
			var list    = get_cookie( name );
			var modules = list.split(':');
			for ( var module = modules.length - 1;  module >= 0; module-- ) {
				display_recent( modules[module] );
			}
		}
		setTimeout( setup_modules, 10 );
		if ( get_cookie('recent') == 'hide' )
			section_toggle('recent');
	}
	else if ( setup_modules.group == 4 ) {
		level = 0;
		setup_modules.group++;
		setTimeout( setup_modules, 10 );
		setTimeout( fade_headding, [% animation %] );
	}
	else if ( setup_modules.group == 5 ) {
		level = 0;
		setup_modules.group++;
		setTimeout( setup_modules, 10 );
		var open_str  = get_cookie('DocPerl_opened');
		if (!open_str) return;
		var open_list = open_str.split(':').sort();
		for ( var i = 0; i < open_list.length; i++ ) {
			list_toggle(open_list[i]);
		}
	}
	else if ( setup_modules.group == 6 ) {
		level = 0;
		setup_modules.group++;
		setTimeout( setup_modules, 10 );

		$(window).resize(function (e) {
			var head  = $('head');
			var doc   = $('body');
			var style = '<style type="text/css"> #frames #title { width: ' + ( doc.get(0).offsetWidth - 240 ) + 'px; } #frames #content { width: ' + ( doc.get(0).offsetWidth - 260 ) + 'px; }</style>';
			head.append(style);
		});
		$(window).resize();
	}
}

/**
 *  @todo
 *  @bug
 *
 *  Animates the main docperl headding
 */
var state      = 'perl';
var fade_count = 0;
var FADE_MAX   = 60;
function animate_headding () {
	var head = document.getElementById('headding');
	fade_count = 0;
	if ( state == 'perl' ) {
		state = 'docperl';
		head.replaceChild( document.createTextNode('DocPerl'), head.firstChild );
	}
	else {
		state = 'perl';
		head.replaceChild( document.createTextNode('Perl\240Documentation'), head.firstChild );
	}

	setTimeout( fade_headding, [% animation %] );
}

/**
 *  @param :
 *  @param :
 *  @todo  rename
 *  @bug
 *
 *  Slides out the headding
 */
function fade_headding () {
	var head = document.getElementById('headding');
	head.textContent = '\240' + head.textContent;
	setTimeout( FADE_MAX == ++fade_count ? animate_headding : fade_headding, 100 );
}

/**
 *  @param :
 *  @param :
 *  @todo
 *  @bug
 *
 *  Opens the advanced search options
 */
function adv_open() {
	var adv   = document.getElementById('advanced');
	var open  = document.getElementById('adv_open');
	var close = document.getElementById('adv_close');
	adv.style.display = 'block';
	open.style.display = 'none';
	close.style.display = 'block';
	adv_cpan();
}

/**
 *  @param :
 *  @param :
 *  @todo
 *  @bug
 *
 *  Closes the advanced search options
 */
function adv_close() {
	var adv   = document.getElementById('advanced');
	var open  = document.getElementById('adv_open');
	var close = document.getElementById('adv_close');
	adv.style.display = 'none';
	open.style.display = 'block';
	close.style.display = 'none';
}

/**
 *  @param :
 *  @param :
 *  @todo
 *  @bug
 *
 *  Enables/Disables the cpan search detail depending on weather the cpan
 *  option is selected or not.
 */
function adv_cpan() {
	if (document.getElementById('type_cpan').checked) {
		document.getElementById('mode').disabled = false;
	}
	else {
		document.getElementById('mode').disabled = 'disabled';
	}
}

/**
 *  @param counter: The counter to increment
 *  @param amount:  The amount to increment the counter by
 *  @todo
 *  @bug
 *
 *  Increments the counter by amount (which could be negative)
 */
function add_count( counter, amount ) {
	var counter_span = document.getElementById( counter + '_count' );
	var counter_value = counter_span.firstChild.nodeValue;
	counter_value -= -amount;
	counter_span.removeChild( counter_span.firstChild );
	counter_span.appendChild( document.createTextNode( counter_value ) );
}

/**
 *  @param counter: The counter to reset
 *  @todo
 *  @bug
 *
 *  Resets a counter to zero
 */
function reset_count( counter ) {
	var counter_span = document.getElementById( counter + '_count' );

	counter_span.removeChild( counter_span.firstChild );
	counter_span.appendChild( document.createTextNode( '0' ) );
}

/**
 *  @param tree:    The module tree to count
 *  @param counter: The counter associated with the tree
 *  @todo
 *  @bug
 *
 *  Counts the modules in a tree
 */
function count_tree( tree, counter ) {
	var count = 0;
	for ( var module in tree ) {
		if ( module != '*' ) {
			var data = tree[module];
			var tt   = [];
			for ( var t in data )
				tt.push(t);
			if ( data && tt.length )
				count += count_tree( data, counter );
		}
		else if ( tree[module].length > 0 )
			count++;
	}
	//add_count( counter, count );
	return count;
}

/**
 *  @param  files:
 *  @param  container_id:
 *  @param  path:         The path of the tree
 *  @param  counter:      The counter associated with this tree.
 *  @return :
 *  @todo
 *  @bug
 *
 *  Creates a <ul> tree of modules
 */
var tree_holder = [];
function create_tree( files, container_id, path, counter ) {
	// need to stick each module into a container
	var container= document.getElementById(container_id);
	var ul       = document.createElement('ul');
	ul.className = 'mod_list';
	ul.id        = 'ul__'+path;
	level++;

	// usually occurs when reopening trees at load when parients are not open
	if ( !container ) return;

	if ( !counter )
		counter = path;
	else
		ul.style.display = 'none';
	if (!files)
		files = tree_holder[path];

	var files_sort = [];
	for ( var module in files ) {
		files_sort.push(module);
	}
	files_sort.sort( function (a,b) {
		return a.toLowerCase() == b.toLowerCase() ? 0 : ( a.toLowerCase() > b.toLowerCase() ? 1 : -1 );
	});

	for ( var module in files_sort ) {
		module = files_sort[module];
		if ( module != '*' ) {
			var li   = document.createElement('li');
			li.id    = 'li__' + path + '__' + module;
			var data = files[module];
			var num  = 0;
			var label;

			// should this just be 'num = data.size;' ?
			for ( var sub in data ) {
				num++;
			}

			// the javascript contains only one element if there are no sub directories
			li.appendChild( create_plus( num >= 2 ? path + '__' + module : null ) );

			data = files[module]['*'];
			if ( data && data.length ) {
				label = create_module( path + '__' + module, module );
			}
			else {
				label = document.createTextNode( module );
			}

			//
			li.appendChild( label );
			tree_holder[path + '__' + module] = files[module];
			ul.appendChild( li );
		}
	}

	container.appendChild( ul );
	return ul;
}

/**
 *  @param  path:   The full module path
 *  @param  module: The module name.
 *  @return <a>:    The anchor tag linking to the module information
 *  @todo
 *  @bug
 *
 *  Creates the module link
 */
function create_module(path, module) {
	var display = path_to_module(path);
	var label   = document.createElement('a');
	label.href  = '?page=pod&module=' + path;
	label.title = display;
	$(label).click( function() {
		click_module(path);
	});
	label.setAttribute( 'target', 'main' );
	label.appendChild( document.createTextNode( module ) );

	create_click( label, '?page=pod&module=' + path );
	return label;
}

/**
 *  @param  anchor: The anchor tag object
 *  @param  url:    The url that the anchor tag links to
 *
 *  Converts clicks to ajax requests for other pages.
 */
function create_click (anchor, url) {
	url += '&ajax=true' ;
	label = $(anchor);

	var target = url.match(/module=([^&]+)/);
	if (target && target[1]) target = target[1];
	else                     target = create_click.count++;
	console.log(url, "\n", target);

	label.click( function () {
		$.historyLoad(target);

		$.get( url, null, function(data) {
			var right = $('td.right');
			right.html(data);

			var links = $('td.right a');
			var location = document.location.toString() + '';
			location = location.replace(/#.*$/, '');

			links.each(function(i) {
				if (!this.href) return true;

				if (
					this.href.match(new RegExp(location))
					&&  this.href.match(/module=.*/)
					&& !this.href.match(/#|javascript:/)
				) {
					create_click(this, this.href);
				}

				return true;
			});
		});
		return false;
	});
}

/**
 *  @param  path:      The path to expand to (if no path supplied then a place
 *                     holder element is created).
 *  @return <a>|<div>: Javascript linking anchor tag if there is a path or a
 *                     place holder division other wise.
 *  @todo
 *  @bug
 *
 *  Creates the expansion/collapse element for the lists if there are sub
 *  modules and a place holder element if there are no sub modules.
 */
function create_plus(path) {
	var plus;
	// the javascript contains only one element if there are no sub directories
	if ( path ) {
		plus               = document.createElement('a');
		plus.id            = 'plus__' + path;
		plus.href          = 'javascript: list_toggle("' + path + '")';
		plus.title         = 'Show';
		plus.className     = 'mod_expand';
		plus.style.cssText = 'text-decoration: none';
		plus.appendChild( document.createTextNode( '+' ) );
	}
	else {
		plus               = document.createElement('div');
		plus.className     = 'mod_expand';
		plus.style.cssText = 'border-width: 0px;';
		plus.appendChild( document.createTextNode( '.' ) );
	}

	return plus;
}

/**
 *  @param path: The path that the user clicked on.
 *  @todo
 *  @bug
 *
 *  Event called when the user clicks on a module name. Adds the path to the
 *  recent modules list.
 */
function click_module( path ) {

[% IF HideDefaultModule %]
	// Check if the path is the default path and the first module to be displayed (and don't disply)
	if ( !click_module.clicked_once && path == '[% DefaultModule %]' ) {
		return;
	}
	click_module.clicked_once = true;
[% END %]

	var name = 'DocPerl_recent';
	if ( exists_cookie(name) ) {
		if (!display_recent.called)
			return;
		var recent  = document.getElementById('ul_recent');
		var list    = get_cookie(name);
		var modules = list.split(':');
		var new_list = [path];
		var remove  = [];
		var count   = 0;
		var max     = [% history_size %];

		for ( var i in modules ) {
			var module = modules[i];
			if ( module != path ) {
				new_list.push(module);
			}
			else {
				remove.push(count);
			}
			count++;
		}

		if ( remove.length ) {
			count = 0;
			for ( var i = 0; i < recent.childNodes.length; i++ ) {
				if ( recent.childNodes[i].nodeName == 'LI' ) {
					if ( count++ == remove[0] ) {
						remove.shift();
						add_count( 'recent', -1 );
						recent.removeChild(recent.childNodes[i]);
					}
				}
			}
		}

		if ( new_list.length > max ) {
			add_count( 'recent', -1 );
			while ( recent.childNodes.length >= max )
				recent.removeChild(recent.childNodes[recent.childNodes.length - 1]);
			new_list.pop();
		}

		set_cookie( name, new_list.join(':') );
	}
	else {
		set_cookie( name, path );
	}
	display_recent(path);
}

/**
 *  @todo
 *  @bug
 *
 *  Clears all modules in the recent module list and from the recent
 *  cookie. It also resets the counter.
 */
function clear_recent() {
	if (confirm('[% str_reset_confirm %]')) {
		clear_cookie( 'DocPerl_recent');
		var recent  = document.getElementById('ul_recent');
		while (recent.firstChild)
			recent.removeChild(recent.firstChild);
		reset_count('recent');
	}
}

/**
 *  @param path: The path to add to the recent list
 *  @todo
 *  @bug
 *
 *  Adds a path to the recent module list.
 */
function display_recent(path) {
	display_recent.called = true;
	var path_parts = path.split('__');
	var recent_doc = document.getElementById('recent_doc');
	var recent_ul  = document.getElementById('ul_recent');
	var name       = path_to_module(path);
	recent_doc.style.cssText = '';
	recent_doc.style.display = 'block';

	var li = document.createElement('li');
	li.appendChild( create_plus() );
	li.appendChild( create_module( path, name ) );

	if ( recent_ul.firstChild ) {
		recent_ul.insertBefore( li, recent_ul.firstChild );
	}
	else {
		recent_ul.appendChild(li);
	}
	add_count( 'recent', 1 );
}

/**
 *  @param force: A forces the search for module names less than 4 characters long
 *  @todo
 *  @bug
 *
 *  Searches the all modules names to find those that match the search term
 */
function search(force) {
	var term = document.getElementById('search').value;

	if ( !force && term.length < 4 )
		return;

	if (document.getElementById('type_names').checked)
		search_names(term);
	else
		document.getElementById('names_doc').style.display = 'none';

	if (document.getElementById('type_pod').checked)
		search_ajax({ section: 'pod', area: 'text', terms: term});
	else
		document.getElementById('pod_doc').style.display = 'none';

	if (document.getElementById('type_functions').checked)
		search_ajax({ section: 'functions', area: 'function', terms: term });
	else
		document.getElementById('functions_doc').style.display = 'none';

	if (document.getElementById('type_cpan').checked)
		search_cpan({ section: 'cpan', area: 'function', terms: term });
}

function search_cpan(args) {
	var main = window.parent.main;
	var mode = document.getElementById('mode');
	mode = mode.options[mode.selectedIndex].value;
	main.location = 'http://search.cpan.org/search?mode=' + mode + '&query=' + args.terms;
}

function search_ajax(args) {
	var area_doc = document.getElementById(args.section + '_doc');
	var section  = document.getElementById(args.section);
	var url      = 'search.cgi?type=jason&terms=' + args.terms + '&area=' + args.area;
	var ul       = document.createElement('ul');

	while (section.firstChild)
		section.removeChild(section.firstChild);

	ul.id = 'ul__names';
	section.appendChild(ul);
	reset_count(args.section);

	HTTP.get_jason(
		url,
		function(result) {
			//alert(result + '\n' + args.section);
			area_doc.style.display = 'block';
			add_count( args.section, result.count );

			for ( var name in result.results ) {
				var li     = document.createElement('li');
				var ul_sub = document.createElement('ul');
				var path   = args.section + '__' + name;
				li.id      = 'li__' + path;
				ul_sub.id  = 'ul__' + path;
				li.appendChild( create_plus(path) );
				li.appendChild( document.createTextNode(name) );

				for ( var item in result.results[name] ) {
					var li_sub = document.createElement('li');
					var found_item = result.results[name][item];
					found_item = found_item.replace( /::/g, '__' );

					li_sub.appendChild( create_plus() );
					li_sub.appendChild( create_module( path + '__' + found_item, result.results[name][item] ) );
					ul_sub.appendChild(li_sub);
				}

				li.appendChild(ul_sub);
				ul.appendChild(li);
			}
		}
	);
}

function search_names(term) {
	var names_doc = document.getElementById('names_doc');
	if ( !term ) {
		names_doc.style.cssText = 'display:none';
		return;
	}

	var terms = term.split(/\s+/);
	var names = document.getElementById('names');
	var ul    = document.createElement('ul');
	names_doc.style.cssText = '';

	while (names.firstChild)
		names.removeChild(names.firstChild);

	ul.id = 'ul__names';
	names.appendChild(ul);
	reset_count('names');

	for ( var i in terms ) {
		var cur_term = terms[i];

		var list = show_found( [perl.POD], cur_term, 'perl', 'POD' );
		if ( list )
			ul.appendChild( list );
		list = show_found( local, cur_term, 'local', 'Local' );
		if ( list )
			ul.appendChild( list );
		list = show_found( inc, cur_term, 'inc', 'Installed' );
		if ( list )
			ul.appendChild( list );
	}
}

/**
 *  @param  list: This is the list to search
 *  @param  term: The search tearm
 *  @param  base: The display list id base
 *  @param  name: The display name for the list of found modules
 *  @return <li>: A list item containg a list of all found items
 *  @todo
 *  @bug
 *
 *  Creates list items for found modules
 */
function show_found( list, term, base, name ) {
	var count  = 0;
	var li     = document.createElement('li');
	var ul_sub = document.createElement('ul');
	var path   = 'names__' + base;
	li.id      = 'li__' + path;
	ul_sub.id  = 'ul__' + path;
	li.appendChild( create_plus(path) );
	li.appendChild( document.createTextNode(name) );

	for ( var i in list ) {
		var item  = list[i];
		var found = find_in( item, term );

		if ( found.length ) {
			count += found.length;

			for ( var item in found ) {
				var li_sub = document.createElement('li');
				var found_item = found[item];
				found_item = found_item.replace( /::/g, '__' );

				li_sub.appendChild( create_plus() );
				li_sub.appendChild( create_module( path + '__' + found_item, found[item] ) );
				ul_sub.appendChild(li_sub);
			}
		}
	}

	if ( !count )
		return null;

	add_count( 'names', count );
	li.appendChild(ul_sub);

	return li;
}

/**
 *  @param  list:  The list to search through
 *  @param  term:  The search term to compare with
 *  @param  name:  The name of the module that represents list
 *  @return Array: Array of found modules
 *  @todo
 *  @bug
 *
 *  Recurses through the list trying to find modules that match term
 */
function find_in( list, term, name ) {
	var next  = name ? name + '::' : '';
	var found = [];
	var regex = new RegExp( term, 'i' );

	for ( var item in list ) {
		var module = next + item;

		// Check if the node is actually a module and if it matches the re
		if ( list[item]['*'] && list[item]['*'].length && module.match( regex ) ) {
			found.push( module );
		}

		// itterate to sub modules
		if ( item != '*' ) {
			var matches = find_in( list[item], term, module );
			for ( var i in matches )
				found.push( matches[i] );
		}
	}
	return found;
}

/**
 *  @param id: The id of the list to toggle
 *  @todo
 *  @bug
 *
 *  Toggles open/close the list identified by id
 */
function list_toggle( id ) {
	var ul = document.getElementById( 'ul__' + id );
	if (!ul) {
		ul = create_tree( null, 'li__'+id, id, 'inc');
	}
	if (!ul) return;

	// get the link element
	var link      = document.getElementById( 'plus__' + id );
	var open_str  = get_cookie('DocPerl_opened');
	var open_list = open_str ? open_str.split(':').sort() : [];

	// check the status of the list
	if ( ul.style && ul.style.display == 'block' ) {
		// list is open so close
		ul.style.display = 'none';
		link.removeChild( link.firstChild );
		link.appendChild( document.createTextNode('+') );
		link.title = '[% str_list_show %]';

		// remove the id from the list if present
		var new_open_list = [];
		for ( var i = 0; i < open_list.length; i++ ) {
			if ( open_list[i] != id ) {
				new_open_list.push(open_list[i]);
			}
		}
		open_list = new_open_list;
	}
	else {
		// list is closed so open
		ul.style.display = 'block';
		link.removeChild( link.firstChild );
		link.appendChild( document.createTextNode('-') );
		link.title = '[% str_list_hide %]';

		// append the id to the list if not already present
		var found = false;
		for ( var i = 0; i < open_list.length; i++ ) {
			if ( open_list[i] == id ) {
				found = true;
			}
		}
		if (!found) open_list.push(id);
	}
	set_cookie('DocPerl_opened', open_list.join(':'));
}

/**
 *  @param section: The section to toggle open/closed
 *  @todo
 *  @bug
 *
 *  Toggles a whole section open/closed.
 */
function section_toggle( section ) {
	var sect = document.getElementById( section );
	var head = document.getElementById( section + '_head' );
	var link = document.getElementById( 'plus__' + section );
	// check the status of the list
	if ( sect.style && sect.style.display ) {
		// list is closed so open
		sect.style.display = '';
		head.style.marginBottom = '';
		link.removeChild( link.firstChild );
		link.appendChild( document.createTextNode('-') );
		link.title = '[% str_section_hide %]';
		clear_cookie( section );
	}
	else {
		// list is open so close
		sect.style.display = 'none';
		head.style.marginBottom = '1px';
		link.removeChild( link.firstChild );
		link.appendChild( document.createTextNode('+') );
		link.title = '[% str_section_show %]';
		set_cookie( section, 'hide' );
	}
}

/**
 *  @param  path:   The path to convert to a module name
 *  @return string: The propper module name
 *  @todo
 *  @bug
 *
 *  Converts a path (which is in the form of {section}__{group}__module) into
 *  a standard module name.
 */
function path_to_module(path) {
	var module = path.replace(/__/g, '::');
	return module.replace( /^(?:[^:]+)::(?:[^:]+)::/, '' );
}

/***** CURRENT LINK *****/

/**
 *  @todo implementation
 *  @bug
 *
 *  Sets the current link to a link that the user can click on to see the
 *  page in its current state.
 */

function update_current_link() {
	var link = document.getElementById('current-link');
	var url  = window.parent.main.location.href;

	// Alter the url to load the frames page
	url = url.replace( /page=\w+&?/, '' );

	// add the url to the link
	link.href = url;

	// make sure if the link is clicked that it replaces the current page
	link.target = '_TOP';
}

/*************************\
 *                       *
 *  UTILITIE  FUNCTIONS  *
 *                       *
\*************************/

/***** COOKIES *****/

/**
 *  @param  name:   The name of the cookie wanted
 *  @return string: The value of the cokkie
 *  @todo
 *  @bug
 *
 *  Gets the value of a cookie called name
 */
function get_cookie(name) {
	var result          = null;
	var my_cookie       = ' ' + document.cookie + '; ';
	var search_name     = ' ' + name + '=';
	var start_of_cookie = my_cookie.indexOf(search_name);
	var end_of_cookie;

	if (start_of_cookie != -1) {
		start_of_cookie += search_name.length;
		// skip past cookie name
		end_of_cookie = my_cookie.indexOf(';',start_of_cookie);
		result = unescape(my_cookie.substring(start_of_cookie, end_of_cookie));
	}

	return result
}

/**
 *  @param name:    The name of the cookie to set
 *  @param value:   The value the should have
 *  @param expires: The time that the cookie expires (Date object)
 *  @param path:    The path of the cookie
 *  @param domain:  The domain of the cookie
 *  @param secure:  Flags that the cookie should be secure
 *  @todo
 *  @bug
 *
 *  Sets a cookie with the supplied parameters
 */
function set_cookie(name, value, expires, path, domain, secure) {
	var expiry_string = expires == null ? '' : ('; expires=' + expires.toGMTString());
	var path_string   = path    == null ? '' : ('; path=' + path);
	var domain_string = domain  == null ? '' : ('; domain=' + domain);
	var secure_string = secure  == true ? '; secure' : '';
	var new_cookie    = name + '=' + escape(value) + expiry_string + path_string + domain_string + secure_string;
	document.cookie   = new_cookie;
}

/**
 *  @param name:   The cookie to delete
 *  @param path:   The path of the cookie
 *  @param domain: The domaing of the cookie
 *  @param secure: Flags if the cookie should be secure
 *  @todo
 *  @bug
 *
 *  Clears/deletes a cookie from the system.
 */
function clear_cookie(name, path, domain, secure) {
	var three_days  = 3 * 24 * 60 * 60 * 1000;
	var expiry_date = new Date();
	expiry_date.setTime(expiry_date.getTime() - three_days);
	set_cookie(name, 'ImOutOfHere', expiry_date, path, domain, secure);
}

/**
 *  @param  cookie: The cookie to check for existance
 *  @return bool:   True if the cookie exists false other wise
 *  @todo
 *  @bug
 *
 *  Determines the existance of a cookie
 */
function exists_cookie(cookie) {
	return (get_cookie(cookie) == null) ? false : true;
}

/**
 *  @param  name: The cookie to count
 *  @return int:  The number of cookies with the name name
 *  @todo
 *  @bug
 *
 *  Counts the number of cookies with the name 'name' (ie path, domain, etc are different)
 */
function get_cookie_count(name) {
	var result          = 0;
	var my_cookie       = ' ' + document.cookie + ';';
	var search_name     = ' ' + name + '=';
	var name_length     = search_name.length;
	var start_of_cookie = my_cookie.indexOf(search_name);

	while (start_of_cookie != -1) {
		result += 1;
		start_of_cookie = my_cookie.indexOf(search_name, start_of_cookie + name_length);
	}
	return result;
}

/**
 *  @param  name:          The name of the cookie
 *  @param  cookie_number: The order of the cookie to get
 *  @return string:        The value of the cookie
 *  @todo
 *  @bug
 *
 *  For cookies with many entries this gets the one numberd cookie_number.
 */
function get_cookie_number(name, cookie_number) {
	var result = null;
	if (cookie_number >= 1) {
		var cntr            = 0;
		var my_cookie       = ' ' + document.cookie + ';';
		var search_name     = ' ' + name + '=';
		var name_length     = search_name.length;
		var start_of_cookie = my_cookie.indexOf(search_name);

		for (cntr = 1; cntr < cookie_number; cntr++) {
			start_of_cookie = my_cookie.indexOf(search_name, start_of_cookie + name_length);
		}

		if (start_of_cookie != 1) {
			start_of_cookie  += name_length; // skip past cookie name
			var end_of_cookie = my_cookie.indexOf(';', start_of_cookie);
			result = unescape(my_cookie.substring(start_of_cookie, end_of_cookie));
		}
	}
	return result;
}


// AJAX stuff
// Code from Javascript the definitave guide
var HTTP = {};
HTTP._factories = [
	function() { return new XMLHttpRequest(); },
	function() { return new ActiveXObject("Msxml2.XMLHTTP"); },
	function() { return new ActiveXObject("Microsoft.XMLHTTP"); }
];

HTTP.newRequest = function() {
	if ( HTTP._factory != null ) return HTTP._factory();

	for ( var i = 0; i < HTTP._factories.length; i++ ) {
		try {
			var factory = HTTP._factories[i];
			var request = factory();
			if ( request != null ) {
				HTTP._factory = factory;
				return request;
			}
		}
		catch (e) {
			continue;
		}
	}

	HTTP._factory = function() { throw new Error("XMLHttpRequest not supported") };
	HTTP._factory();
	return false;
};

HTTP.get_jason = function(url, callback) {
	var request = HTTP.newRequest();
	request.onreadystatechange = function() {
		if (request.readyState == 4 && request.status == 200) {
			try {
				eval('var response = ' + request.responseText + ';');
				callback(response);
			}
			catch (e) {
				throw new Error('Could not eval jason response: ' + e);
				callback(null);
			}
		}
	};
	request.open('GET', url);
	request.send(null);
};

/***** DEBUG ******/

var debug_div   = null;
var debug_found = false;
function debug(msg) {
	if ( !debug_div && debug_found )
		return;
	if ( !debug_div && !debug_found ) {
		debug_div = document.getElementById('debug');
		debug_found = true;
		debug(msg);
		return;
	}

	var out = document.createElement('div');
	out.appendChild( document.createTextNode(msg) );
	debug_div.appendChild(out);

	return;
}

/**** JQuery code ****/

function pageload(hash) {
	var url;
	if (hash) {
		var module = hash.match(/^((?:(local|inc|perl)__[A-Z]|\w+::).*)/);
		url = "?page=pod" + "&module=" + module[1] + "&location=" + (module[2] ? module[2] : inc);
	}
	else {
		url = default_url;
	}
	$.get( url, null, function(data) {
		var right = $('td.right');
		right.html(data);
		var links = $('td.right a');
		links.each(function(i) {
			if (!this.href) return true;

			create_click(this, this.href);

			return true;
		});
	});
}

$(document).ready( function() {
	$.historyInit(pageload, default_url);
});
